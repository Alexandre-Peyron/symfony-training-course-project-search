<?php

namespace AppBundle\Repository;

use AppBundle\Enum\ProductSearchCriteria as Criteria;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Filter all products by criteria
     *
     * @param $criteria
     * @return array
     */
    public function filterByAllCriteria($criteria, $pager = null)
    {
        $queryBuilder = $this->queryFilterByAllCriteria($criteria);

        if (is_array($pager)) {
            $queryBuilder
                ->setFirstResult($pager['currentPosition'])
                ->setMaxResults($pager['nbResultByPage']);
        }

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * Count filtered products
     *
     * @param array $criteria
     *
     * @return integer
     */
    public function countFilterByAllCriteria($criteria)
    {
        $queryBuilder = $this->queryFilterByAllCriteria($criteria);

        return $queryBuilder
            ->select('COUNT(p.id)')
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * Query to filter all products by criteria
     *
     * @param array $criteria
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function queryFilterByAllCriteria($criteria)
    {
        $queryBuilder = $this->createQueryBuilder('p');

        $queryBuilder->where('p.isEnabled = 1');

        if (!empty($criteria[Criteria::SEARCH])) {
            $queryBuilder->andWhere(
                $queryBuilder->expr()->orX(
                    $queryBuilder->expr()->like('p.name', $queryBuilder->expr()->literal('%' . $criteria[Criteria::SEARCH] . '%')),
                    $queryBuilder->expr()->like('p.description', $queryBuilder->expr()->literal('%' . $criteria[Criteria::SEARCH] . '%')),
                    $queryBuilder->expr()->like('p.reference', $queryBuilder->expr()->literal('%' . $criteria[Criteria::SEARCH] . '%'))
                ));
        }

        if (!empty($criteria[Criteria::PRICE_MIN])) {
            $queryBuilder
                ->andWhere('p.price >= :priceMin')
                ->setParameter('priceMin', $criteria[Criteria::PRICE_MIN]);
        }

        if (!empty($criteria[Criteria::PRICE_MAX])) {
            $queryBuilder
                ->andWhere('p.price <= :priceMax')
                ->setParameter('priceMax', $criteria[Criteria::PRICE_MAX]);
        }

        if (!empty($criteria[Criteria::NOTE])) {
            $queryBuilder
                ->andWhere('p.note >= :note')
                ->setParameter('note', $criteria[Criteria::NOTE]);
        }

        if (!empty($criteria[Criteria::PREMIUM])) {
            $queryBuilder->andWhere('p.isPremium = :isPremium')
                ->setParameter('isPremium', $criteria[Criteria::PREMIUM]);
        }

        if (!empty($criteria[Criteria::TYPE])) {
            $queryBuilder
                ->leftJoin('p.type', 't')
                ->andWhere('t.id = :typeId')
                ->setParameter('typeId', $criteria[Criteria::TYPE]);
        }

        if (!empty($criteria[Criteria::BRAND])) {
            $queryBuilder
                ->leftJoin('p.brand', 'b')
                ->andWhere('b.id = :brandId')
                ->setParameter('brandId', $criteria[Criteria::BRAND]);
        }

        return $queryBuilder;
    }


}
